function [Z,U,optinf] = cbpdnL_split(D, S, L, lambda, mu, opt)

% cbpdnL_lasso -- Convolutional Basis Pursuit DeNoising with Laplacian
%
%         argmin_{x_k} (1/2)||\sum_k d_k * x_k - s||_2^2 +
%                           lambda \sum_k ||x_k||_1 
%                      + (mu/2) \sum_l <x_k^l,Lx_k^l>
%
%         The solution is computed using an ADMM approach (see
%         boyd-2010-distributed) with efficient solution of the main
%         linear systems (see wohlberg-2014-efficient).
%
% Usage:
%       [Z, U] = cbpdnL_split(D, S,L, lambda,mu, opt);
%
% Input:
%       D           Dictionary filter set (3D array)
%       S           Input image
%       L           Graph Laplacian info of image windows
%                   L = 1:p cell array. Fields:
%                   L.phi, L.E, L.ind1, L.ind2 (indx is the rect
%                   coordinate of the patch to consider);
%       lambda      Regularization parameter
%       opt         Algorithm parameters structure
%
% Output:
%       Y           Dictionary coefficient map set (3D array)
%       optinf      Details of optimisation
%
%
% Options structure fields:
%   Verbose          Flag determining whether iteration status is displayed.
%                    Fields are iteration number, functional value,
%                    data fidelity term, l1 regularisation term, and
%                    primal and dual residuals (see Sec. 3.3 of
%                    boyd-2010-distributed). The value of rho is also
%                    displayed if options request that it is automatically
%                    adjusted.
%   MaxMainIter      Maximum main iterations
%   AbsStopTol       Absolute convergence tolerance (see Sec. 3.3.1 of
%                    boyd-2010-distributed)
%   RelStopTol       Relative convergence tolerance (see Sec. 3.3.1 of
%                    boyd-2010-distributed)
%   L1Weight         Weighting array for coefficients in l1 norm of X
%   Y0               Initial value for Y
%   U0               Initial value for U
%   rho              ADMM penalty parameter
%   AutoRho          Flag determining whether rho is automatically updated
%                    (see Sec. 3.4.1 of boyd-2010-distributed)
%   AutoRhoPeriod    Iteration period on which rho is updated
%   RhoRsdlRatio     Primal/dual residual ratio in rho update test
%   RhoScaling       Multiplier applied to rho when updated
%   AutoRhoScaling   Flag determining whether RhoScaling value is 
%                    adaptively determined (see wohlberg-2015-adaptive). If 
%                    enabled, RhoScaling specifies a maximum allowed 
%                    multiplier instead of a fixed multiplier.
%   RhoRsdlTarget    Residual ratio targeted by auto rho update policy.
%   StdResiduals     Flag determining whether standard residual definitions 
%                    (see Sec 3.3 of boyd-2010-distributed) are used instead
%                    of normalised residuals (see wohlberg-2015-adaptive)
%   RelaxParam       Relaxation parameter (see Sec. 3.4.3 of
%                    boyd-2010-distributed)
%   NoBndryCross     Flag indicating whether all solution coefficients
%                    corresponding to filters crossing the image boundary
%                    should be forced to zero.
%   AuxVarObj        Flag determining whether objective function is computed
%                    using the auxiliary (split) variable
%   HighMemSolve     Use more memory for a slightly faster solution
%
%
% Author: Brendt Wohlberg <brendt@lanl.gov>  Modified: 2015-04-09
%
% This file is part of the SPORCO library. Details of the copyright
% and user license can be found in the 'Copyright' and 'License' files
% distributed with the library.


if nargin < 6,
  opt = [];
end
%checkopt(opt, defaultopts({}));
opt = defaultopts(opt);
optinf = [];
% Set up status display for verbose operation
if opt.Verbose
    if strcmp(opt.Lformat,'Eig')
        hstr = 'Itn   Fnc       DFid      JL_par    JL_perp    l1        ry         sy         rz        sz     ';
        sfms = '%4d %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e ';
        nsep = 97;
    else
        hstr = 'Itn   Fnc       DFid      JLp       l1        ry         sy         rz        sz     ';
        sfms = '%4d %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e %9.2e ';
        nsep = 90;
    end
    if opt.AutoRho,
        hstr = [hstr '   rho    '];
        sfms = [sfms ' %9.2e'];
        nsep = nsep + 10;
    end
    if opt.AutoSigma,
        hstr = [hstr '    sigma  '];
        sfms = [sfms ' %9.2e'];
        nsep = nsep + 10;
    end
end
if opt.Verbose && opt.MaxMainIter > 0,
  disp(hstr);
  disp(char('-' * ones(1,nsep)));
end

% Collapsing of trailing singleton dimensions greatly complicates
% handling of both SMV and MMV cases. The simplest approach would be
% if s could always be reshaped to 4d, with dimensions consisting of
% image rows, image cols, a single dimensional placeholder for number
% of filters, and number of measurements, but in the single
% measurement case the third dimension is collapsed so that the array
% is only 3d.
if size(S,3) > 1 && size(S,4) == 1,
  xsz = [size(S,1) size(S,2) size(D,3) size(S,3)];
  hrm = [1 1 1 size(S,3)];
  % Insert singleton 3rd dimension (for number of filters) so that
  % 4th dimension is number of images in input s volume
  S = reshape(S, [size(S,1) size(S,2) 1 size(S,3)]);
else
  xsz = [size(S,1) size(S,2) size(D,3) size(S,4)];
  hrm = 1;
end
xrm = [1 1 size(D,3)];

% Start timer
tstart = tic;

% Compute filters in DFT domain
Df = fft2(D, size(S,1), size(S,2));
% Convolve-sum and its Hermitian transpose
Dop = @(x) sum(bsxfun(@times, Df, x), 3);
DHop = @(x) bsxfun(@times, conj(Df), x);
% Compute signal in DFT domain
Sf = fft2(S);
% S convolved with all filters in DFT domain
DSf = DHop(Sf);

% Default lambda is 1/10 times the lambda value beyond which the
% solution is a zero vector
if nargin < 3 | isempty(lambda),
  b = ifft2(DHop(Sf), 'symmetric');
  lambda = 0.1*max(vec(abs(b)));
end


% Set up algorithm parameters and initialise variables
rho = opt.rho;
if isempty(rho), rho = 50*lambda+1; end;
if isempty(opt.RhoRsdlTarget),
  if opt.StdResiduals,
    opt.RhoRsdlTarget = 1;
    opt.SigmaRsdlTarget = 1;
  else
    opt.RhoRsdlTarget = 1 + (18.3).^(log10(lambda) + 1);
    opt.SigmaRsdlTarget = opt.RhoRsdlTarget;
  end
end
sigma = rho;
if opt.HighMemSolve,
  C = bsxfun(@rdivide, Df, sum(Df.*conj(Df), 3) + rho + sigma);
else
  C = [];
end

Nx = prod(xsz);
rz = Inf;
sz = Inf;
epriz = 0;
eduaz = 0;
ry = Inf;
sy = Inf;
epriy = 0;
eduay = 0;

% Initialise main working variables
X = [];
if isempty(opt.Y0),
  Y = zeros(xsz);
else
  Y = opt.Y0;
end
Yprv = Y;
if isempty(opt.U0),
  if isempty(opt.Y0),
    U = zeros(xsz);
  else
    U = (lambda/rho)*sign(Y);
  end
else
  U = opt.U0;
end

if isempty(opt.Z0),
  Z = zeros(xsz);
else
  Z = opt.Z0;
end
Zprv = Z;
if isempty(opt.V0),
  if isempty(opt.V0),
    V = zeros(xsz);
  else
    V = (lambda/rho)*sign(Y);
  end
else
  V = opt.V0;
end


% Main loop
k = 1;
%check which solver to use for Y update
if ~isempty(opt.Lformat)
    if strcmp(opt.Lformat, 'Eig')
       lf = 'e';
    else
        lf = 'm';
    end
else
    if isfield(L{1},'phi')
        lf = 'e';
    else
        lf = 'm';
    end    
end


if lf == 'm'
    A = {};
    I1 = L{1}.ind1(1):L{1}.ind2(1);
    I2 = L{1}.ind1(2):L{1}.ind2(2);
    sz = [length(I2)*length(I1),size(Y,3)];
    usz = length(I2)*length(I1)*size(Y,3);
    for i = 1:length(L)
        A{i} = speye(size(L{i}.M))*sigma+ mu*L{i}.M;
    end
    Aop = {};
    for i = 1:length(L)
        temp = @(u) reshape(A{i}*(reshape(u,sz)),usz,1);
        Aop{i} = temp;
    end
    zcgtol = opt.RelStopTol/10;
    
end



while k <= opt.MaxMainIter %& (rz > epriz | sz > eduaz) & (ry > epriy | sy > eduay),

  % Solve X subproblem
  Xf = solvedbi_sm(Df, rho+sigma, DSf + (rho+sigma)*fft2(rho/(rho+sigma)*(Y - U)+ sigma/(rho+sigma)*(Z-V)), C);
  X = ifft2(Xf, 'symmetric');

  % See pg. 21 of boyd-2010-distributed
  if opt.RelaxParam == 1,
    Xr = X;
  else
    Xr = opt.RelaxParam*X + (1-opt.RelaxParam)*Y;
  end

  % Solve Y subproblem
  Y = shrink(Xr + U, (lambda/rho)*opt.L1Weight);  
  
  % Solve Z subproblem. Either via PCG or Eig Decomp
  if lf == 'e'  %reshapes!! Careful with the direction
      a = Xr+V; JL_par = 0; JL_perp = 0;
      for i = 1:length(L)
          E = L{i}.E;
          phi = L{i}.phi;
          I1 = L{i}.ind1(1):L{i}.ind2(1);
          I2 = L{i}.ind1(2):L{i}.ind2(2);
          ai = reshape(permute(a(I1,I2,:),[2,1,3]),length(I1)*length(I2) ...
              ,size(a,3));
          %solve via eigenvectors
          ai_c = phi'*ai;
          ai_par = phi*(ai_c);
          ai_perp = ai - ai_par;
          temp_c = bsxfun(@times,sigma./(mu*E + sigma),ai_c) ;
          temp_par = phi*temp_c;
          temp_perp = ai_perp*sigma/(mu+sigma);
          temp = temp_par + temp_perp;
          temp = reshape(temp,length(I1),length(I2),size(a,3));
          Z(I1,I2,:) = permute(temp,[2,1,3]);
          if opt.Verbose,
             JL_par = JL_par + sum(vec(temp_c.*bsxfun(@times,temp_c,E))); 
             JL_perp = JL_perp + sum(vec(temp_perp.^2));
          end
          
      end
      JLp = JL_par + JL_perp;
      clear a temp E phi temp temp_par temp_perp;
  end
  
  if lf == 'm' % pcg solver
      a = Xr+V; JLp = 0;
      for i = 1:length(L)
          I1 = L{i}.ind1(1):L{i}.ind2(1);
          I2 = L{i}.ind1(2):L{i}.ind2(2);
          [temp,~] =  pcg(Aop{i},sigma*reshape(permute(a(I1,I2,:),[2,1,3]),length(I1)*length(I2)*size(a,3),1),zcgtol);
          temp = reshape(temp,length(I1)*length(I2),size(a,3));
          if opt.Verbose,
              JLp = JLp + trace(temp'*L{i}.M*temp);
          end
          temp = reshape(temp,length(I1),length(I2),size(a,3));
          Z(I1,I2,:) = permute(temp,[2,1,3]);          
          clear a  temp;
      end
  end
  
  
  % Update dual variable
  U = U + Xr - Y;
  V = V + Xr - Z;
  
  
  % Compute data fidelity term in Fourier domain (note normalisation)
  if opt.Verbose
      if opt.AuxVarObj,
          Yf = fft2(Y); % This represents unnecessary computational cost
          Jdf = sum(vec(abs(sum(bsxfun(@times,Df,Yf),3)-Sf).^2))/(2*xsz(1)*xsz(2));
          Jl1 = sum(abs(vec(bsxfun(@times, opt.L1Weight, Y))));
      else
          Jdf = sum(vec(abs(sum(bsxfun(@times,Df,Xf),3)-Sf).^2))/(2*xsz(1)*xsz(2));
          Jl1 = sum(abs(vec(bsxfun(@times, opt.L1Weight, X))));
      end
      Jfn = Jdf + lambda*Jl1 + .5*mu*JLp;
  end

  nX = norm(X(:)); nY = norm(Y(:)); nU = norm(U(:));
  if opt.StdResiduals,
    % See pp. 19-20 of boyd-2010-distributed
    ry = norm(vec(X - Y));
    sy = norm(vec(rho*(Yprv - Y)));
    epriy = sqrt(Nx)*opt.AbsStopTol+max(nX,nY)*opt.RelStopTol;
    eduay = sqrt(Nx)*opt.AbsStopTol+rho*nU*opt.RelStopTol;
  else
    % See wohlberg-2015-adaptive
    ry = norm(vec(X - Y))/max(nX,nY);
    sy = norm(vec(Yprv - Y))/nU;
    epriy = sqrt(Nx)*opt.AbsStopTol/max(nX,nY)+opt.RelStopTol;
    eduay = sqrt(Nx)*opt.AbsStopTol/(rho*nU)+opt.RelStopTol;
  end

  
  nZ = norm(X(:));  nV = norm(U(:));
  if opt.StdResiduals,
    % See pp. 19-20 of boyd-2010-distributed
    rz = norm(vec(X - Z));
    sz = norm(vec(sigma*(Zprv - Z)));
    epriz = sqrt(Nx)*opt.AbsStopTol+max(nX,nZ)*opt.RelStopTol;
    eduaz = sqrt(Nx)*opt.AbsStopTol+sigma*nV*opt.RelStopTol;
  else
    % See wohlberg-2015-adaptive
    rz = norm(vec(X - Z))/max(nX,nZ);
    sz = norm(vec(Zprv - Z))/nV;
    epriz = sqrt(Nx)*opt.AbsStopTol/max(nX,nZ)+opt.RelStopTol;
    eduaz = sqrt(Nx)*opt.AbsStopTol/(sigma*nV)+opt.RelStopTol;
  end
  
  
  if opt.Verbose,
    if lf == 'e'  
        dvc = [k, Jfn, Jdf, JL_par,JL_perp Jl1, ry, sy, rz, sz];
    else
        dvc = [k, Jfn, Jdf, JLp, Jl1, ry, sy, rz, sz];        
    end
    if opt.AutoRho,
      dvc = [dvc rho];
    end
    if opt.AutoSigma,
      dvc = [dvc sigma];
    end
    disp(sprintf(sfms, dvc));
  end

  % See wohlberg-2015-adaptive and pp. 20-21 of boyd-2010-distributed
  if opt.AutoRho,
    if k ~= 1 && mod(k, opt.AutoRhoPeriod) == 0,
      if opt.AutoRhoScaling,
        rhomlt = sqrt(ry/(sy*opt.RhoRsdlTarget));
        if rhomlt < 1, rhomlt = 1/rhomlt; end
        if rhomlt > opt.RhoScaling, rhomlt = opt.RhoScaling; end
      else
        rhomlt = opt.RhoScaling;
      end
      rsf = 1;
      if ry > opt.RhoRsdlTarget*opt.RhoRsdlRatio*sy, rsf = rhomlt; end
      if sy > (opt.RhoRsdlRatio/opt.RhoRsdlTarget)*ry, rsf = 1/rhomlt; end
      rho = rsf*rho;
      U = U/rsf;
      if opt.HighMemSolve && rsf ~= 1,
        C = bsxfun(@rdivide, Df, sum(Df.*conj(Df), 3) + (rho+sigma));
      end
    end
  end

    % See wohlberg-2015-adaptive and pp. 20-21 of boyd-2010-distributed
  if opt.AutoSigma,
    if k ~= 1 && mod(k, opt.AutoSigmaPeriod) == 0,
      if opt.AutoSigmaScaling,
        sigmamlt = sqrt(rz/(sz*opt.SigmaRsdlTarget));
        if sigmamlt < 1, sigmamlt = 1/sigmamlt; end
        if sigmamlt > opt.SigmaScaling, sigmamlt = opt.SigmaScaling; end
      else
        sigmamlt = opt.SigmaScaling;
      end
      rsf = 1;
      if rz > opt.SigmaRsdlTarget*opt.SigmaRsdlRatio*sz, rsf = sigmamlt; end
      if sz > (opt.SigmaRsdlRatio/opt.SigmaRsdlTarget)*rz, rsf = 1/sigmamlt; end
      if rsf ~= 1
          sigma = rsf*sigma;
          V = V/rsf;
          if opt.HighMemSolve && rsf ~= 1,
              C = bsxfun(@rdivide, Df, sum(Df.*conj(Df), 3) + rho + sigma);
          end
          if lf == 'm'
              A = {};
              I1 = L{1}.ind1(1):L{1}.ind2(1);
              I2 = L{1}.ind1(2):L{1}.ind2(2);
              sz = [length(I2)*length(I1),size(Y,3)];
              usz = length(I2)*length(I1)*size(Y,3);
              for i = 1:length(L)
                  A{i} = speye(size(L{i}.M))*sigma+ mu*L{i}.M;
              end
              Aop = {};
              for i = 1:length(L)
                  temp = @(u) reshape(A{i}*(reshape(u,sz)),usz,1);
                  Aop{i} = temp;
              end
          end
      end
    end
  end
  
  
  Yprv = Y;
  Zprv = Z;
  k = k + 1;

end


% End status display for verbose operation
if opt.Verbose && opt.MaxMainIter > 0,
  disp(char('-' * ones(1,nsep)));
end


return

end
function u = vec(v)

  u = v(:);

return
end

function u = shrink(v, lambda)

  if isscalar(lambda),
    u = sign(v).*max(0, abs(v) - lambda);
  else
    u = sign(v).*max(0, bsxfun(@minus, abs(v), lambda));
  end

return

end

function opt = defaultopts(opt)

  if ~isfield(opt,'Verbose'),
    opt.Verbose = 0;
  end
  if ~isfield(opt,'MaxMainIter'),
    opt.MaxMainIter = 1000;
  end
  if ~isfield(opt,'Ysolver'),
      opt.Ysolver = [];
  end
  if ~isfield(opt,'AbsStopTol'),
    opt.AbsStopTol = 0;
  end
  if ~isfield(opt,'RelStopTol'),
    opt.RelStopTol = 1e-4;
  end
  if ~isfield(opt,'L1Weight'),
    opt.L1Weight = 1;
  end
  if ~isfield(opt,'Y0'),
    opt.Y0 = [];
  end
  if ~isfield(opt,'U0'),
    opt.U0 = [];
  end
  if ~isfield(opt,'rho'),
    opt.rho = [];
  end
  if ~isfield(opt,'Z0'),
    opt.Z0 = [];
  end
  if ~isfield(opt,'V0'),
    opt.V0 = [];
  end
  if ~isfield(opt,'sigma'),
    opt.sigma = [];
  end  
  
  if ~isfield(opt,'AutoRho'),
    opt.AutoRho = 1;
  end
  if ~isfield(opt,'AutoRhoPeriod'),
    opt.AutoRhoPeriod = 1;
  end
  if ~isfield(opt,'RhoRsdlRatio'),
    opt.RhoRsdlRatio = 1.2;
  end
  if ~isfield(opt,'RhoScaling'),
    opt.RhoScaling = 100;
  end
  if ~isfield(opt,'AutoRhoScaling'),
    opt.AutoRhoScaling = 1;
  end
  if ~isfield(opt,'RhoRsdlTarget'),
    opt.RhoRsdlTarget = [];
  end
  
   if ~isfield(opt,'AutoSigma'),
    opt.AutoSigma = 1;
  end
  if ~isfield(opt,'AutoSigmaPeriod'),
    opt.AutoSigmaPeriod = 1;
  end
  if ~isfield(opt,'SigmaRsdlRatio'),
    opt.SigmaRsdlRatio = 1.2;
  end
  if ~isfield(opt,'SigmaScaling'),
    opt.SigmaScaling = 100;
  end
  if ~isfield(opt,'AutoSigmaScaling'),
    opt.AutoSigmaScaling = 1;
  end
  if ~isfield(opt,'SigmaRsdlTarget'),
    opt.SigmaRsdlTarget = [];
  end
  
  
  if ~isfield(opt,'StdResiduals'),
    opt.StdResiduals = 0;
  end
  if ~isfield(opt,'RelaxParam'),
    opt.RelaxParam = 1.8;
  end
  if ~isfield(opt,'NoBndryCross'),
    opt.NoBndryCross = 0;
  end
  if ~isfield(opt,'AuxVarObj'),
    opt.AuxVarObj = 0;
  end
  if ~isfield(opt,'HighMemSolve'),
    opt.HighMemSolve = 0;
  end

return
end